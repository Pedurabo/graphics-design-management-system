name: Professional Graphics Design System CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: graphics-design-system

jobs:
  # Code Quality & Security Analysis
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r ai-services/requirements.txt

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run Python linting
        run: |
          pip install flake8 black isort
          flake8 ai-services/
          black --check ai-services/
          isort --check-only ai-services/

      - name: Security scan with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run SonarQube analysis
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scannerHomeDir: ./.sonar/scanner

  # Unit Testing
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
        python-version: [3.9, 3.10, 3.11]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r ai-services/requirements.txt

      - name: Run frontend tests
        run: npm test -- --coverage --watchAll=false

      - name: Run backend tests
        run: npm run test:backend

      - name: Run AI services tests
        run: |
          cd ai-services
          python -m pytest tests/ --cov=services --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info,./ai-services/coverage.xml

  # Integration Testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r ai-services/requirements.txt

      - name: Run integration tests
        run: |
          npm run test:integration
          cd ai-services && python -m pytest tests/integration/

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run load tests
        run: |
          npm install -g artillery
          artillery run tests/load/load-test.yml

  # Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r ai-services/requirements.txt

      - name: Build frontend
        run: npm run build

      - name: Build backend
        run: npm run build:backend

      - name: Package AI services
        run: |
          cd ai-services
          python setup.py sdist bdist_wheel

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            frontend/build/
            backend/dist/
            ai-services/dist/

  # Docker Build & Security Scan
  docker-build:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push AI Services image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-services
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/ai-services:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Infrastructure as Code Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, infrastructure-validation]
    environment: staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name staging-cluster

      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/frontend frontend=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
          kubectl set image deployment/backend backend=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
          kubectl set image deployment/ai-services ai-services=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/ai-services:${{ github.sha }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/frontend -n staging
          kubectl rollout status deployment/backend -n staging
          kubectl rollout status deployment/ai-services -n staging

      - name: Run smoke tests
        run: |
          npm run test:smoke -- --base-url=https://staging.graphics-design-system.com

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, infrastructure-validation]
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name production-cluster

      - name: Deploy to production
        run: |
          kubectl apply -f k8s/production/
          kubectl set image deployment/frontend frontend=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
          kubectl set image deployment/backend backend=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
          kubectl set image deployment/ai-services ai-services=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/ai-services:${{ github.sha }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/frontend -n production
          kubectl rollout status deployment/backend -n production
          kubectl rollout status deployment/ai-services -n production

      - name: Run production tests
        run: |
          npm run test:production -- --base-url=https://graphics-design-system.com

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Production deployment successful! 🚀'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Monitoring & Alerting
  monitoring-setup:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name production-cluster

      - name: Deploy monitoring stack
        run: |
          kubectl apply -f monitoring/
          kubectl apply -f security/

      - name: Verify monitoring
        run: |
          kubectl get pods -n monitoring
          kubectl get pods -n security

  # Post-deployment verification
  post-deployment:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-production, monitoring-setup]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Health check
        run: |
          curl -f https://graphics-design-system.com/health
          curl -f https://api.graphics-design-system.com/health
          curl -f https://ai.graphics-design-system.com/health

      - name: Performance monitoring
        run: |
          npm run test:performance -- --base-url=https://graphics-design-system.com

      - name: Security scan
        run: |
          npm run test:security -- --base-url=https://graphics-design-system.com

      - name: Final notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#team'
          text: '🎨 Graphics Design System successfully deployed and verified! All systems operational.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 