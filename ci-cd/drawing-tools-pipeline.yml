pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18.17.0'
        PYTHON_VERSION = '3.9'
        DOCKER_REGISTRY = 'graphics-app-registry'
        KUBERNETES_NAMESPACE = 'drawing-tools'
        SLACK_CHANNEL = '#drawing-tools-dev'
        WEBGL_TESTING = 'true'
        PRESSURE_SENSITIVITY_TESTING = 'true'
    }
    
    tools {
        nodejs 'NodeJS-18.17.0'
        jdk 'OpenJDK-11'
        python 'Python-3.9'
    }
    
    stages {
        stage('Code Quality Check') {
            parallel {
                stage('Lint Frontend') {
                    steps {
                        dir('frontend') {
                            sh 'npm ci'
                            sh 'npm run lint'
                            sh 'npm run type-check'
                            sh 'npm run prettier:check'
                        }
                    }
                }
                stage('Lint Backend') {
                    steps {
                        dir('backend') {
                            sh 'npm ci'
                            sh 'npm run lint'
                            sh 'npm run type-check'
                        }
                    }
                }
                stage('Lint AI Services') {
                    steps {
                        dir('ai-services') {
                            sh 'pip install -r requirements.txt'
                            sh 'flake8 services/'
                            sh 'mypy services/'
                            sh 'black --check services/'
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('Dependency Check') {
                    steps {
                        dir('frontend') {
                            sh 'npm audit --audit-level moderate'
                        }
                        dir('backend') {
                            sh 'npm audit --audit-level moderate'
                        }
                        dir('ai-services') {
                            sh 'safety check'
                        }
                    }
                }
                stage('Code Security') {
                    steps {
                        sh 'sonar-scanner -Dsonar.projectKey=drawing-tools'
                    }
                }
                stage('Container Security') {
                    steps {
                        sh 'trivy image --severity HIGH,CRITICAL ${DOCKER_REGISTRY}/drawing-tools:latest'
                    }
                }
                stage('WebGL Security') {
                    steps {
                        sh 'npm run test:webgl-security'
                    }
                }
            }
        }
        
        stage('Unit Tests') {
            parallel {
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm run test:unit -- --coverage --watchAll=false'
                        }
                    }
                    post {
                        always {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'frontend/coverage/lcov-report',
                                reportFiles: 'index.html',
                                reportName: 'Frontend Coverage'
                            ])
                        }
                    }
                }
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            sh 'npm run test:unit -- --coverage'
                        }
                    }
                    post {
                        always {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'backend/coverage/lcov-report',
                                reportFiles: 'index.html',
                                reportName: 'Backend Coverage'
                            ])
                        }
                    }
                }
                stage('AI Services Tests') {
                    steps {
                        dir('ai-services') {
                            sh 'python -m pytest tests/ -v --cov=services --cov-report=html'
                        }
                    }
                    post {
                        always {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'ai-services/htmlcov',
                                reportFiles: 'index.html',
                                reportName: 'AI Services Coverage'
                            ])
                        }
                    }
                }
                stage('Brush Algorithm Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm run test:brush-algorithms'
                        }
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                sh 'docker-compose -f docker-compose.test.yml up -d'
                sh 'npm run test:integration'
                sh 'docker-compose -f docker-compose.test.yml down'
            }
        }
        
        stage('Performance Tests') {
            parallel {
                stage('Brush Performance') {
                    steps {
                        sh 'npm run test:brush-performance'
                    }
                }
                stage('Canvas Performance') {
                    steps {
                        sh 'npm run test:canvas-performance'
                    }
                }
                stage('WebGL Performance') {
                    steps {
                        sh 'npm run test:webgl-performance'
                    }
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'tests/performance/reports',
                        reportFiles: 'index.html',
                        reportName: 'Performance Report'
                    ])
                }
            }
        }
        
        stage('Pressure Sensitivity Tests') {
            steps {
                sh 'npm run test:pressure-sensitivity'
            }
        }
        
        stage('WebGL Compatibility Tests') {
            steps {
                sh 'npm run test:webgl-compatibility'
            }
        }
        
        stage('Build & Package') {
            parallel {
                stage('Build Frontend') {
                    steps {
                        dir('frontend') {
                            sh 'npm run build'
                            sh 'docker build -t ${DOCKER_REGISTRY}/drawing-tools-frontend:${BUILD_NUMBER} .'
                        }
                    }
                }
                stage('Build Backend') {
                    steps {
                        dir('backend') {
                            sh 'npm run build'
                            sh 'docker build -t ${DOCKER_REGISTRY}/drawing-tools-backend:${BUILD_NUMBER} .'
                        }
                    }
                }
                stage('Build AI Services') {
                    steps {
                        dir('ai-services') {
                            sh 'docker build -t ${DOCKER_REGISTRY}/drawing-tools-ai:${BUILD_NUMBER} .'
                        }
                    }
                }
                stage('Build WebGL Components') {
                    steps {
                        dir('frontend') {
                            sh 'npm run build:webgl'
                            sh 'docker build -t ${DOCKER_REGISTRY}/drawing-tools-webgl:${BUILD_NUMBER} -f Dockerfile.webgl .'
                        }
                    }
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                script {
                    docker.withRegistry('https://${DOCKER_REGISTRY}', 'docker-registry-credentials') {
                        sh 'docker push ${DOCKER_REGISTRY}/drawing-tools-frontend:${BUILD_NUMBER}'
                        sh 'docker push ${DOCKER_REGISTRY}/drawing-tools-backend:${BUILD_NUMBER}'
                        sh 'docker push ${DOCKER_REGISTRY}/drawing-tools-ai:${BUILD_NUMBER}'
                        sh 'docker push ${DOCKER_REGISTRY}/drawing-tools-webgl:${BUILD_NUMBER}'
                        
                        if (env.BRANCH_NAME == 'main') {
                            sh 'docker tag ${DOCKER_REGISTRY}/drawing-tools-frontend:${BUILD_NUMBER} ${DOCKER_REGISTRY}/drawing-tools-frontend:latest'
                            sh 'docker tag ${DOCKER_REGISTRY}/drawing-tools-backend:${BUILD_NUMBER} ${DOCKER_REGISTRY}/drawing-tools-backend:latest'
                            sh 'docker tag ${DOCKER_REGISTRY}/drawing-tools-ai:${BUILD_NUMBER} ${DOCKER_REGISTRY}/drawing-tools-ai:latest'
                            sh 'docker tag ${DOCKER_REGISTRY}/drawing-tools-webgl:${BUILD_NUMBER} ${DOCKER_REGISTRY}/drawing-tools-webgl:latest'
                            
                            sh 'docker push ${DOCKER_REGISTRY}/drawing-tools-frontend:latest'
                            sh 'docker push ${DOCKER_REGISTRY}/drawing-tools-backend:latest'
                            sh 'docker push ${DOCKER_REGISTRY}/drawing-tools-ai:latest'
                            sh 'docker push ${DOCKER_REGISTRY}/drawing-tools-webgl:latest'
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        sh 'kubectl config use-context staging'
                        sh 'kubectl set image deployment/drawing-tools-frontend frontend=${DOCKER_REGISTRY}/drawing-tools-frontend:${BUILD_NUMBER} -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl set image deployment/drawing-tools-backend backend=${DOCKER_REGISTRY}/drawing-tools-backend:${BUILD_NUMBER} -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl set image deployment/drawing-tools-ai ai=${DOCKER_REGISTRY}/drawing-tools-ai:${BUILD_NUMBER} -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl set image deployment/drawing-tools-webgl webgl=${DOCKER_REGISTRY}/drawing-tools-webgl:${BUILD_NUMBER} -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl rollout status deployment/drawing-tools-frontend -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl rollout status deployment/drawing-tools-backend -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl rollout status deployment/drawing-tools-ai -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl rollout status deployment/drawing-tools-webgl -n ${KUBERNETES_NAMESPACE}'
                    }
                }
            }
        }
        
        stage('E2E Tests') {
            when {
                branch 'main'
            }
            steps {
                sh 'npm run test:e2e'
            }
        }
        
        stage('User Acceptance Testing') {
            when {
                branch 'main'
            }
            steps {
                sh 'npm run test:user-acceptance'
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Deploy drawing tools to production?', ok: 'Deploy'
                script {
                    withCredentials([string(credentialsId: 'kubeconfig-prod', variable: 'KUBECONFIG')]) {
                        sh 'kubectl config use-context production'
                        sh 'kubectl set image deployment/drawing-tools-frontend frontend=${DOCKER_REGISTRY}/drawing-tools-frontend:${BUILD_NUMBER} -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl set image deployment/drawing-tools-backend backend=${DOCKER_REGISTRY}/drawing-tools-backend:${BUILD_NUMBER} -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl set image deployment/drawing-tools-ai ai=${DOCKER_REGISTRY}/drawing-tools-ai:${BUILD_NUMBER} -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl set image deployment/drawing-tools-webgl webgl=${DOCKER_REGISTRY}/drawing-tools-webgl:${BUILD_NUMBER} -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl rollout status deployment/drawing-tools-frontend -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl rollout status deployment/drawing-tools-backend -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl rollout status deployment/drawing-tools-ai -n ${KUBERNETES_NAMESPACE}'
                        sh 'kubectl rollout status deployment/drawing-tools-webgl -n ${KUBERNETES_NAMESPACE}'
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            script {
                if (env.BRANCH_NAME == 'main') {
                    slackSend(
                        channel: env.SLACK_CHANNEL,
                        color: 'good',
                        message: "✅ Drawing Tools Pipeline SUCCESS\nBuild: ${env.BUILD_NUMBER}\nBranch: ${env.BRANCH_NAME}\nDuration: ${currentBuild.durationString}\nFeatures: Brush, Pencil, Eraser, Mixer Brush"
                    )
                }
            }
        }
        failure {
            script {
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'danger',
                    message: "❌ Drawing Tools Pipeline FAILED\nBuild: ${env.BUILD_NUMBER}\nBranch: ${env.BRANCH_NAME}\nDuration: ${currentBuild.durationString}\nURL: ${env.BUILD_URL}"
                )
            }
        }
        cleanup {
            sh 'docker system prune -f'
        }
    }
} 