name: Enhanced Graphics Application CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Bandit security scan (Python)
        run: |
          pip install bandit
          bandit -r ./ai-services -f json -o bandit-report.json

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci
          cd ../ai-services && pip install -r requirements.txt

      - name: Run ESLint
        run: |
          npm run lint
          cd frontend && npm run lint
          cd ../backend && npm run lint

      - name: Run Prettier check
        run: |
          npm run format:check
          cd frontend && npm run format:check
          cd ../backend && npm run format:check

      - name: Run Python linting
        run: |
          pip install flake8 black isort
          flake8 ./ai-services --max-line-length=100
          black --check ./ai-services
          isort --check-only ./ai-services

  # Testing
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci
          cd ../ai-services && pip install -r requirements.txt

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:ci
          npm run test:coverage

      - name: Run backend tests
        run: |
          cd backend
          npm run test:ci
          npm run test:coverage

      - name: Run AI services tests
        run: |
          cd ai-services
          python -m pytest tests/ --cov=services --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info,./backend/coverage/lcov.info,./ai-services/coverage.xml

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run load tests
        run: |
          artillery run tests/performance/load-test.yml

  # Build and Push Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push AI Services image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-services
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -var="environment=staging" -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply tfplan

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --name graphics-app-staging --region us-east-1
          kubectl apply -f k8s/staging/

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -var="environment=production" -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply tfplan

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --name graphics-app-production --region us-east-1
          kubectl apply -f k8s/production/

  # Monitoring and Health Checks
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Health check staging
        if: needs.deploy-staging.result == 'success'
        run: |
          curl -f http://staging.graphics-app.com/health || exit 1

      - name: Health check production
        if: needs.deploy-production.result == 'success'
        run: |
          curl -f http://graphics-app.com/health || exit 1

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }} 