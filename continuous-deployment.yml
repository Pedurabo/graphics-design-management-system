name: Continuous Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quick Build & Test (Parallel)
  quick-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci
          cd ../ai-services && pip install -r requirements.txt

      - name: Quick lint check
        run: |
          npm run lint || true
          cd frontend && npm run lint || true
          cd ../backend && npm run lint || true

      - name: Quick test
        run: |
          npm test || true
          cd frontend && npm test -- --watchAll=false || true
          cd ../backend && npm test || true

  # Docker Build & Push
  docker-build:
    runs-on: ubuntu-latest
    needs: quick-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push AI Services
        uses: docker/build-push-action@v5
        with:
          context: ./ai-services
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          
          # Pull latest images
          docker-compose pull
          
          # Deploy with new images
          docker-compose -f docker-compose.yml up -d
          
          # Wait for services
          sleep 30
          
          # Health check
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:5000/health || exit 1
          
          echo "Staging deployment successful!"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          
          # Stop existing containers
          docker-compose down || true
          
          # Pull latest images
          docker-compose pull
          
          # Deploy with new images
          docker-compose -f docker-compose.yml up -d
          
          # Wait for services
          sleep 60
          
          # Health check
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:5000/health || exit 1
          
          echo "Production deployment successful!"

  # Post-deployment tests
  post-deploy-tests:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment tests..."
          
          # Basic functionality tests
          curl -f http://localhost:3000/ || echo "Frontend not accessible"
          curl -f http://localhost:8000/api/health || echo "Backend not accessible"
          curl -f http://localhost:5000/health || echo "AI service not accessible"
          
          echo "Post-deployment tests completed"

  # Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deploy-tests]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi 