# Graphics Design Management System Security Policy
# DevSecOps Security as Code Configuration

apiVersion: security.kubernetes.io/v1
kind: PodSecurityPolicy
metadata:
  name: graphics-design-psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true

---
# Network Policy for Application Isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: graphics-design-network-policy
  namespace: graphics-design
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000  # Frontend
        - protocol: TCP
          port: 8000  # Backend
        - protocol: TCP
          port: 8001  # AI Services
    - from:
        - podSelector:
            matchLabels:
              app: frontend
      ports:
        - protocol: TCP
          port: 8000  # Frontend to Backend
        - protocol: TCP
          port: 8001  # Frontend to AI Services
    - from:
        - podSelector:
            matchLabels:
              app: backend
      ports:
        - protocol: TCP
          port: 5432  # Backend to Database
        - protocol: TCP
          port: 6379  # Backend to Redis
        - protocol: TCP
          port: 9200  # Backend to Elasticsearch
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 443
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

---
# Security Context for Pods
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-config
  namespace: graphics-design
data:
  security-context.yaml: |
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL

---
# RBAC Configuration
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: graphics-design-app-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: graphics-design-app-binding
subjects:
  - kind: ServiceAccount
    name: graphics-design-sa
    namespace: graphics-design
roleRef:
  kind: ClusterRole
  name: graphics-design-app-role
  apiGroup: rbac.authorization.k8s.io

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: graphics-design-sa
  namespace: graphics-design
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/graphics-design-eks-role

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: graphics-design-pdb
  namespace: graphics-design
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: graphics-design

---
# Resource Quotas
apiVersion: v1
kind: ResourceQuota
metadata:
  name: graphics-design-quota
  namespace: graphics-design
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    persistentvolumeclaims: "10"
    services: "10"
    services.loadbalancers: "2"

---
# Limit Ranges
apiVersion: v1
kind: LimitRange
metadata:
  name: graphics-design-limits
  namespace: graphics-design
spec:
  limits:
    - type: Container
      default:
        memory: 512Mi
        cpu: 500m
      defaultRequest:
        memory: 256Mi
        cpu: 250m
      max:
        memory: 2Gi
        cpu: 2000m
      min:
        memory: 64Mi
        cpu: 50m

---
# Security Audit Configuration
apiVersion: audit.k8s.io/v1
kind: Policy
metadata:
  name: graphics-design-audit-policy
rules:
  - level: RequestResponse
    resources:
      - group: ""
        resources: ["secrets", "configmaps"]
  - level: Metadata
    resources:
      - group: ""
        resources: ["pods", "services", "deployments"]
  - level: Request
    resources:
      - group: "rbac.authorization.k8s.io"
        resources: ["clusterroles", "clusterrolebindings"]

---
# Pod Security Standards
apiVersion: v1
kind: Namespace
metadata:
  name: graphics-design
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Security Context for Specific Applications
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-secure
  namespace: graphics-design
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      serviceAccountName: graphics-design-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        capabilities:
          drop:
            - ALL
      containers:
        - name: frontend
          image: graphics-design-frontend:latest
          ports:
            - containerPort: 3000
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/.cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}

---
# Security Monitoring Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-monitoring-config
  namespace: graphics-design
data:
  falco-rules.yaml: |
    - rule: Unauthorized Process
      desc: Detect unauthorized processes
      condition: spawned_process and not proc.name in (authorized_processes)
      output: Unauthorized process started (user=%user.name command=%proc.cmdline)
      priority: WARNING
      
    - rule: Container Escape
      desc: Detect container escape attempts
      condition: container and proc.name=sh and proc.args contains "-c" and proc.args contains "docker"
      output: Container escape attempt (user=%user.name command=%proc.cmdline)
      priority: CRITICAL
      
    - rule: Privilege Escalation
      desc: Detect privilege escalation attempts
      condition: proc.name=su or proc.name=sudo
      output: Privilege escalation attempt (user=%user.name command=%proc.cmdline)
      priority: WARNING

---
# Security Scanning Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-scanning-config
  namespace: graphics-design
data:
  trivy-config.yaml: |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: trivy-config
    data:
      trivy.yaml: |
        image:
          ref: aquasec/trivy:latest
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 500m
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL

---
# Compliance Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: compliance-config
  namespace: graphics-design
data:
  compliance-rules.yaml: |
    # GDPR Compliance
    - rule: Data Access Logging
      desc: Log all data access for GDPR compliance
      condition: file_access and sensitive_data
      output: Data access logged (user=%user.name file=%fd.name)
      priority: INFO
      
    # SOC 2 Compliance
    - rule: Authentication Events
      desc: Log authentication events for SOC 2
      condition: auth_event
      output: Authentication event (user=%user.name result=%auth.result)
      priority: INFO
      
    # ISO 27001 Compliance
    - rule: Security Configuration
      desc: Monitor security configuration changes
      condition: config_change and security_related
      output: Security configuration changed (user=%user.name change=%config.change)
      priority: WARNING 