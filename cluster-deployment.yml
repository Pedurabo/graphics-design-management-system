name: Cluster-Based Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Target Cluster'
        required: true
        default: 'frontend'
        type: choice
        options:
        - frontend
        - backend
        - ai-services
        - infrastructure
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend Cluster
  frontend-cluster:
    runs-on: ubuntu-latest
    if: github.event.inputs.cluster == 'frontend' || github.event_name == 'push'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd teams/frontend-cluster
          npm ci

      - name: Run tests
        run: |
          cd teams/frontend-cluster
          npm run test

      - name: Build frontend
        run: |
          cd teams/frontend-cluster
          npm run build

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./teams/frontend-cluster
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        if: github.event.inputs.environment == 'staging'
        run: |
          kubectl apply -f k8s/staging/frontend-deployment.yaml
          kubectl rollout status deployment/frontend -n graphics-app

  # Backend Cluster
  backend-cluster:
    runs-on: ubuntu-latest
    if: github.event.inputs.cluster == 'backend' || github.event_name == 'push'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd teams/backend-cluster
          npm ci

      - name: Run tests
        run: |
          cd teams/backend-cluster
          npm run test

      - name: Build backend
        run: |
          cd teams/backend-cluster
          npm run build

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./teams/backend-cluster
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        if: github.event.inputs.environment == 'staging'
        run: |
          kubectl apply -f k8s/staging/backend-deployment.yaml
          kubectl rollout status deployment/backend -n graphics-app

  # AI Services Cluster
  ai-services-cluster:
    runs-on: ubuntu-latest
    if: github.event.inputs.cluster == 'ai-services' || github.event_name == 'push'
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd teams/ai-cluster
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd teams/ai-cluster
          python -m pytest tests/ -v

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./teams/ai-cluster
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        if: github.event.inputs.environment == 'staging'
        run: |
          kubectl apply -f k8s/staging/ai-services-deployment.yaml
          kubectl rollout status deployment/ai-services -n graphics-app

  # Infrastructure Cluster
  infrastructure-cluster:
    runs-on: ubuntu-latest
    if: github.event.inputs.cluster == 'infrastructure' || github.event_name == 'push'
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -var="environment=${{ github.event.inputs.environment || 'staging' }}" -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd infrastructure
          terraform apply tfplan

  # Security Scan (Parallel)
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: [frontend-cluster, backend-cluster, ai-services-cluster]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Health check frontend
        run: |
          curl -f http://localhost:3000/health || echo "Frontend health check failed"

      - name: Health check backend
        run: |
          curl -f http://localhost:8000/health || echo "Backend health check failed"

      - name: Health check AI services
        run: |
          curl -f http://localhost:5000/health || echo "AI services health check failed"

  # Notify
  notify:
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "Cluster deployment completed for ${{ github.event.inputs.cluster || 'all' }} clusters"
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
          echo "Status: ${{ job.status }}" 